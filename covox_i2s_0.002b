#include "driver/i2s.h"

static const i2s_port_t i2s_num = I2S_NUM_0;

uint32_t buf[2048];
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
volatile uint32_t totalInterruptCounter = 0;
uint32_t totalSamplesPlayed = 0;

void IRAM_ATTR onTimer() {
  int8_t s1 = (REG_READ(GPIO_IN_REG) >> 12);
  int8_t s2 = (REG_READ(GPIO_IN_REG) >> 12);
  int8_t s3 = (REG_READ(GPIO_IN_REG) >> 12);
  uint8_t value;
  if (s1 == s2) 
    value = s2;
  else
    value = s3;
  uint16_t i = totalInterruptCounter & 2047; // 0-2047
  buf[i] = (value<<24) | (value<<8); 

  //portENTER_CRITICAL_ISR(&timerMux);
  totalInterruptCounter++;
  //portEXIT_CRITICAL_ISR(&timerMux);
}

static const i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_DAC_BUILT_IN),
    //.sample_rate = 44100,
    .sample_rate = 100000,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,
    //.communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),
    .communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_I2S_MSB),
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,       // high interrupt priority
    .dma_buf_count = 8,                             // 8 buffers
    .dma_buf_len = 512,                            // Number of frames for one-time sampling. The frame here means the total data from all the channels in a WS cycle
    .use_apll = 0,
    .tx_desc_auto_clear = true,
    .fixed_mclk = -1    
};

//------------------------------------------------------------------------------------------------------------------------

void setup() {
  pinMode(12, INPUT); //LPT: 2 (D0)
  pinMode(13, INPUT); //     3 (D1)
  pinMode(14, INPUT); //     4 (D2)
  pinMode(15, INPUT); //     5 (D3)
  pinMode(16, INPUT); //     6 (D4)
  pinMode(17, INPUT); //     7 (D5)
  pinMode(18, INPUT); //     8 (D6)
  pinMode(19, INPUT); //     9 (D7)
                      //     GND
  pinMode(32, OUTPUT); digitalWrite(32, LOW); // GND

  Serial.begin(115200);
  while(Serial.available());
  Serial.println("alku");
  
  static QueueHandle_t i2s_event_queue;
  i2s_driver_install(i2s_num, &i2s_config, 0, NULL);
  //i2s_driver_install(i2s_num, &i2s_config, 10, &i2s_event_queue);
  //i2s_set_pin(i2s_num, &pin_config);
  i2s_set_pin(i2s_num, NULL);
  
  timer = timerBegin(0, 80, true);  // 80 (using 80 as the prescaler value), we will get a signal with a 1 MHz frequency that will increment the timer counter 1 000 000 times per second.
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer, 10, true); // 25 -> 40kHz, 1MHz / 50 = 20kHz // 1MHz / 20 = 50kHz //1MHz / 100 = 10kHz? // 16 -> 62.5kHz
  Serial.println("ennen timerin enablointia");
  timerAlarmEnable(timer);
  
  Serial.println("setup():n loppu");
}



void loop()
{
  size_t bytesWritten;
  //portENTER_CRITICAL(&timerMux);
  uint32_t i = totalInterruptCounter;
  //portEXIT_CRITICAL(&timerMux);
  uint16_t c = i & 2047; // 0-2047
  if (c < 511)
    i2s_write(i2s_num, &buf[1024], sizeof(buf)/4, &bytesWritten, portMAX_DELAY);
  else if (c < 1023)
    i2s_write(i2s_num, &buf[1536], sizeof(buf)/4, &bytesWritten, portMAX_DELAY);
  else if (c < 1535)
    i2s_write(i2s_num, &buf[0], sizeof(buf)/4, &bytesWritten, portMAX_DELAY);
  else
    i2s_write(i2s_num, &buf[512], sizeof(buf)/4, &bytesWritten, portMAX_DELAY);
  //totalSamplesPlayed += sizeof(buf)/4/4;
  //totalSamplesPlayed += 512;
  totalSamplesPlayed += bytesWritten/4;
  //Serial.print("B: "); Serial.print(bytesWritten); Serial.print(" I-S: "); Serial.println(totalInterruptCounter-totalSamplesPlayed+100);
  //Serial.print("c: "); Serial.print(c); Serial.print(" I-S: "); Serial.println(totalInterruptCounter-totalSamplesPlayed+100);
}
